Lessons in Go

Edward Muller
Heroku
edward@heroku.com
http://icanhazdowntime.org
@freeformz

* Heroku
.image heroku-logo-stroke-purple.svg 400 _

* Adoption
- internal log delivery
- hk
- system metrics
- git push heroku master
- backplane pieces
- proxies

* Tools
- go fmt: Format code
- goimports: Clean up imports
- golint: Code style checks
- go vet: Code fitness checks
- godep: Vendor your deps
- errcheck: check for unchecked errors

* Project Management
- Everything non-standard goes in a `Makefile`
- Use `-X`main.<name>=<value>` for injection

* Coding Practices: Structure

- `cmd/$CMD/main.go` pattern
.code cmd.console
- Balanced packages

* Coding Practices: Channels
- `struct{}` vs `bool` channels
- broadcast with `close()`
.code broadcast.go /^func main/,/^}/

* Coding Practices: Initialization
- avoid init()
- Handle env vars in mains

* Coding Practices: HTTP
- close `http.Response.Body` (http.Client)
- Use `github.com/tylerb/graceful` (or equiv)
- Prefer stdlib compat libs vs. magic
- Wish: `net.context` was part of the stdlib (1.7 *maybe* as http.Request.Context)

* Coding Practices: Error Handling
Create error types
.code err.go /^type gitError/,

* Coding Practices: Error Handling (Cont)
- Annotate errors
.code err2.go
`github.com/juju/errors`
- Go routines must handle their own
.code err3.go /^func doStuff/,/^}/
- Rollbar (or equiv)

* Coding Practices: Testing
- Try to stay within the stdlib
- If you use table tests, include identifying info.
- Use ci (Travis/Circle)
- Test with `-race` and w/o.

*  Common Libraries
- github.com/joeshaw/envdecode
- github.com/rcrowley/go-metrics
- github.com/pborman/uuid
- github.com/Sirupsen/logrus
- github.com/heroku/rollbar or github.com/heroku/rollrus
- github.com/juju/errors
- github.com/fernet/fernet-go
- github.com/htcat/htcat
- github.com/BurntSushi/toml
- github.com/tylerb/graceful
- github.com/aws/aws-sdk-go
 ...(many more)

* Debatables
- Assertion / testing libs
- Logging Libraries
